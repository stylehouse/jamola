x-defaults: &defaults
  restart: always

services:
  # connects the internet to this caddy, voulais-dev
  router-config:
    build:
      context: .
      dockerfile_inline: |
        FROM node:20-slim
        
        # Install Chrome dependencies
        RUN apt-get update && apt-get install -y \
            chromium \
            chromium-driver \
            # the fallback strategy, use a upnp-allowed port
            miniupnpc \
            --no-install-recommends \
        && rm -rf /var/lib/apt/lists/*
        
        WORKDIR /app

        # Create non-root user for running Chrome
        RUN groupadd -r pptruser && useradd -r -g pptruser -G audio,video pptruser \
            && mkdir -p /home/pptruser/Downloads \
            && chown -R pptruser:pptruser /home/pptruser \
            && chown -R pptruser:pptruser /app
        
        # Create directory for screenshots and logs
        RUN mkdir -p logs && chown -R pptruser:pptruser logs
        
        COPY package*.json ./
        RUN npm ci
        
        ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true \
            PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium
        

        CMD ["node", "scripts/router-config.js"]
    volumes:
      - ./scripts:/app/scripts
      - ./logs:/app/logs
    environment:
      # < mostly not plugged in. develop if needed.
      - ROUTER_URL=${ROUTER_URL}
      - ROUTER_USERNAME=${ROUTER_USERNAME}
      - ROUTER_PASSWORD=${ROUTER_PASSWORD}
      # the :- operator is like || but not for 0 I believe
      - CHECK_INTERVAL_SECONDS=${CHECK_INTERVAL_SECONDS:-3600}
      - PUPPETEER_HEADLESS=true

    # allow upnp
    ports:
      - "1900:1900/udp"  # SSDP/UPnP discovery
      - "5351:5351/tcp"  # UPnP control port
    network_mode: "host"  # Use host networking for better UPnP support
    <<: *defaults
  
  
  caddy:
    build:
      context: .
      dockerfile_inline: |
        FROM caddy:2-builder AS builder
        RUN xcaddy build --with github.com/caddy-dns/duckdns

        FROM caddy:2
        COPY --from=builder /usr/bin/caddy /usr/bin/caddy
    ports:
      - "9443:443"
    volumes:
      - caddy_data:/data
      - caddy_config:/config
      - ./logs:/var/log/caddy
    configs:
      - source: caddy_config
        target: /etc/caddy/Caddyfile
    environment:
      - DUCKDNS_API_TOKEN=${DUCKDNS_API_TOKEN}
    # depends_on:
    #   cos-jamo:
    #     condition: service_healthy
    networks:
      - web
    <<: *defaults
  
  # See also theproxy/README.md to run the public Caddy server elsewhere.
  ssh-tunnel-source:
      build:
        context: .
        dockerfile_inline: |
          FROM alpine:latest
          RUN apk add --no-cache openssh-client
          RUN mkdir -p /root/.ssh && chmod 700 /root/.ssh
      command: |
        sh -c 'echo "$$SSH_PRIVATE_KEY" > /root/.ssh/id_ed25519 && \
        chmod 600 /root/.ssh/id_ed25519 && \
        exec ssh -v -N \
          -R 0.0.0.0:3000:cos-jamo:3000 \
          -i /root/.ssh/id_ed25519 \
          -o ServerAliveInterval=30 \
          -o ExitOnForwardFailure=yes \
          -o StrictHostKeyChecking=accept-new \
          -p 2023 \
          root@d'
      environment:
        - SSH_PRIVATE_KEY=${SSH_PRIVATE_KEY}
      depends_on:
        - cos-jamo
      networks:
        - web
      <<: *defaults
    
  # the app itself!
  cos-jamo:
    build:
      context: .
      dockerfile: Dockerfile.cos-jamo
    volumes:
      # z lets SELinux share this mount (on Fedora, Debians have AppArmor which isn't fussy here)
      - .:/app:z
      # a more robust place for uploads/ perhaps?
      # if you want to serve this without the /error/ directory
      #  see https://github.com/sveltejs/kit/discussions/10162
      - /media/s/www:/app/static/error:ro
      # Prevent the container's node_modules from being overwritten by the host
      #  this means any `npm i ...` you make in another environ (eg the host)
      #   will need pushing to the container via package.json, the above RUN npm ci
        #  as part of a $ docker compose up --build
      - /app/node_modules
      - /app/.svelte-kit
    ports:
      - "127.0.0.1:9090:3000"
    command: bun run dev -- --port 3000 --host 0.0.0.0
    # healthcheck:
    #   test: ["CMD", "wget", "--spider", "http://127.0.0.1:9090"]
    #   interval: 2s
    #   timeout: 5s
    #   retries: 16
    #   start_period: 30s
    networks:
      - web
    <<: *defaults

volumes:
  caddy_data:
  caddy_config:

networks:
  web:

configs:
  caddy_config:
    content: |
      voulais-dev.duckdns.org {
          # Enable automatic HTTPS
          tls {
              dns duckdns $DUCKDNS_API_TOKEN
          }
          
          # Enable compression
          encode zstd gzip
          
          # Handle all requests
          handle {
              # Reverse proxy to your application
              reverse_proxy cos-jamo:3000
          }
          
          # Basic security headers
          header {
              # Enable HSTS
              Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
              # Prevent browsers from sniffing MIME types
              X-Content-Type-Options "nosniff"
              # XSS protection
              X-XSS-Protection "1; mode=block"
              # Click-jacking protection
              X-Frame-Options "DENY"
          }
          
          # Enable logging
          log {
              output file /var/log/caddy/access.log
              format console
          }
      }