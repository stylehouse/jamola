x-defaults: &defaults
  restart: always

services:
  router-config:
    build:
      context: .
      dockerfile_inline: |
        FROM node:20-slim
        
        # Install Chrome dependencies
        RUN apt-get update && apt-get install -y \
            chromium \
            chromium-driver \
            --no-install-recommends \
        && rm -rf /var/lib/apt/lists/*
        
        WORKDIR /app

        # Create non-root user for running Chrome
        RUN groupadd -r pptruser && useradd -r -g pptruser -G audio,video pptruser \
            && mkdir -p /home/pptruser/Downloads \
            && chown -R pptruser:pptruser /home/pptruser \
            && chown -R pptruser:pptruser /app
        
        # Create directory for screenshots and logs
        RUN mkdir -p logs && chown -R pptruser:pptruser logs
        
        COPY package*.json ./
        RUN npm ci
        
        ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true \
            PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium
        
        CMD ["node", "scripts/router-config.js"]
    volumes:
      - ./scripts:/app/scripts
      - ./logs:/app/logs
    configs:
      - source: caddy_config
        target: /etc/caddy/Caddyfile
    environment:
      - ROUTER_URL=${ROUTER_URL}
      - ROUTER_USERNAME=${ROUTER_USERNAME}
      - ROUTER_PASSWORD=${ROUTER_PASSWORD}
      - CHECK_INTERVAL=${CHECK_INTERVAL:-600000}
      - PUPPETEER_HEADLESS=true
    networks:
      - web
    <<: *defaults
    
  caddy:
    build:
      context: .
      dockerfile_inline: |
        FROM caddy:2-builder AS builder
        RUN xcaddy build --with github.com/caddy-dns/duckdns

        FROM caddy:2
        COPY --from=builder /usr/bin/caddy /usr/bin/caddy
    ports:
      - "9080:80"
      - "9443:443"
    volumes:
      - caddy_data:/data
      - caddy_config:/config
      - ./logs:/var/log/caddy
    configs:
      - source: caddy_config
        target: /etc/caddy/Caddyfile
    environment:
      - DUCKDNS_API_TOKEN=${DUCKDNS_API_TOKEN}
    # depends_on:
    #   cos-jamo:
    #     condition: service_healthy
    networks:
      - web
    <<: *defaults
    
  cos-jamo:
    build:
      context: .
      dockerfile_inline: |
        FROM node:20-slim
        WORKDIR /app
        COPY package*.json ./
        RUN npm ci
        EXPOSE 3000
    volumes:
      - .:/app:exec
      # a more robust place for uploads/ perhaps?
      # if you want to serve this without the /error/ directory
      #  see https://github.com/sveltejs/kit/discussions/10162
      - /media/s/be3654b3-8643-4a6e-9477-68327cc11ff5/www:/app/static/error:ro
      # Prevent the container's node_modules from being overwritten by the host
      #  this means any `npm i ...` you make in another environ (eg the host)
      #   will need pushing to the container via package.json, the above RUN npm ci
      #    as part of a $ docker compose up --build
      - /app/node_modules
    ports:
      - "127.0.0.1:9090:3000"
    command: npm run dev -- --port 3000 --host 0.0.0.0
    # healthcheck:
    #   test: ["CMD", "wget", "--spider", "http://127.0.0.1:9090"]
    #   interval: 2s
    #   timeout: 5s
    #   retries: 16
    #   start_period: 30s
    networks:
      - web
    <<: *defaults

volumes:
  caddy_data:
  caddy_config:

networks:
  web:

configs:
  caddy_config:
    content: |
      voulais.duckdns.org {
          # Enable automatic HTTPS
          tls {
              dns duckdns {$DUCKDNS_API_TOKEN}
          }
          
          # Enable compression
          encode zstd gzip
          
          # Handle all requests
          handle {
              # Reverse proxy to your application
              reverse_proxy cos-jamo:3000
          }
          
          # Basic security headers
          header {
              # Enable HSTS
              Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
              # Prevent browsers from sniffing MIME types
              X-Content-Type-Options "nosniff"
              # XSS protection
              X-XSS-Protection "1; mode=block"
              # Click-jacking protection
              X-Frame-Options "DENY"
          }
          
          # Enable logging
          log {
              output file /var/log/caddy/access.log
              format console
          }
      }